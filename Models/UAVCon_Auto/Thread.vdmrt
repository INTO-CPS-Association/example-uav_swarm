class Thread

instance variables

-- thread period
private period: nat := 1E9;

-- sensors and actuators, controller
-- commands
public static tarX: [Command] := nil;
public static tarY: [Command] := nil;
public static tarZ: [Command] := nil;

-- sensors
public static velX: [Sensor] := nil;
public static velY: [Sensor] := nil;
public static velZ: [Sensor] := nil;
public static posX: [Sensor] := nil;
public static posY: [Sensor] := nil;
public static posZ: [Sensor] := nil;
public static yaw: [Sensor] := nil;

-- actuators
public static pitchOut: [Actuator] := nil;
public static rollOut: [Actuator] := nil;
public static yawOut: [Actuator] := nil;
public static throttleOut: [Actuator] := nil;

private controller: [Controller] := nil;

operations

-- constructor for Thread
public Thread: nat * Controller * Command * Command * Command * Sensor * Sensor * Sensor * Sensor * 
					Sensor * Sensor * Sensor * Actuator * 
					Actuator * Actuator * Actuator  ==> Thread
Thread(f,c,TarX, TarY, TarZ,VelX,VelY,VelZ,PosX,PosY,PosZ,Yaw,Pitchout,Rollout,Yawout,Throttleout) == (
	period := frequency_to_period(f);
	tarX := TarX;
	tarY := TarY;
  tarZ := TarZ;
	velX := VelX;
	velY := VelY;
	velZ := VelZ;
	posX := PosX;
	posY := PosY;
	posZ := PosZ;
	yaw := Yaw;
	
	pitchOut := Pitchout;
	rollOut := Rollout;
	yawOut := Yawout;
	throttleOut := Throttleout;
	controller := c
);

-- control loop
Step: () ==> ()
Step() == (
		tarX.Sync();
		tarY.Sync();
		tarZ.Sync();
		velX.Sync();
		velY.Sync();
		velZ.Sync();
		posX.Sync();
		posY.Sync();
		posZ.Sync();
		yaw.Sync();
		pitchOut.Sync();
		rollOut.Sync();
		yawOut.Sync();
		throttleOut.Sync();
		
		controller.Step();
);

-- run as a periodic thread
thread periodic(period, 0 ,0, 0)(Step);

functions 

-- convert frequency to period in nanoseconds
private frequency_to_period: real -> nat
frequency_to_period(f) == floor 1E9/f

end Thread