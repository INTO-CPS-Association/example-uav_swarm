system System

instance variables

-- interface required by FMU import/export
public static hwi: HardwareInterface := new HardwareInterface();

-- controller object
public static ether : [Ether] := nil;

-- CPU
cpu1: CPU := new CPU(<FP>, 20);

operations

public System: () ==> System
System() == (
  dcl connections: map Ether`Id to Ether`Id := {|->};
  
  for all k in set {mk_token("uav" ^ [i] ^ "in") | i in set {1,...,5}} do (
    for all v in set {mk_token("uav" ^ [j] ^ "in") | j in set {1,...,5}} do
      connections := connections ++ {k |-> v}
  );

	IO`println(connections);

	ether := new Ether(100,--Hz
		{
		  mk_token("uav1in") 	|-> hwi.uav1in,
		  mk_token("uav2in") 	|-> hwi.uav2in,
		  mk_token("uav3in") 	|-> hwi.uav3in,
		  mk_token("uav4in") 	|-> hwi.uav4in,
		  mk_token("uav5in") 	|-> hwi.uav5in
		},
		{
		  mk_token("uav1out") 	|-> hwi.uav1out,
		  mk_token("uav2out") 	|-> hwi.uav2out,
		  mk_token("uav3out") 	|-> hwi.uav3out,
		  mk_token("uav4out") 	|-> hwi.uav4out,
		  mk_token("uav5out") 	|-> hwi.uav5out
		},
		{mk_token("uav" ^ [i] ^ "in") |-> mk_token("uav" ^ [j] ^ "out") 
		  | i,j in set {1,...,5} & i <> j}
	);
  cpu1.deploy(ether, "Ether");
);

end System